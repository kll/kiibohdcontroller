#!/usr/bin/env bash
# Convenience script for loading firmware onto a jlink type device
# By default, initiates JLinkExe

AUTO_SCREEN_SESSION="/dev/kiibohd"
NOSCREEN=0
PROG_NAME=$(basename $0)

# Parse all the command line arguments
while (( "$#" >= "1" )); do
	# Scan each argument
	key="$1"
	case $key in
	-a|--autoscreen)
		AUTO_SCREEN_SESSION="$2"
		shift
		;;
	-n|--noscreen)
		NOSCREEN=1
		shift
		;;
	-h|--help)
		echo "Usage: $PROG_NAME [options...]"
		echo ""
		echo "Loads the most recent built firmware (@TARGET_BIN@) to the device."
		echo "  (load.dfu)"
		echo ""
		echo "Arguments:"
		echo " -a, --autoscreen SERIAL_PORT  Use screen on the specified serial port after loading."
		echo "                               e.g. /dev/ttyACM0"
		echo " -n, --noscreen                Don't automatically connect to the serial port"
		echo " -h, --help                    This message."
		exit 1
		;;
	*)
		echo "INVALID ARG: '$1'"
		exit 2
		;;
	esac

	# Shift to the next argument
	shift
done

# Load via JLinkExe
# Used for development boards
if type JLinkExe &>/dev/null; then
	echo "loadfile @TARGET_BIN@ @TARGET_ADDRESS@" > flash.jlink
	echo "verifybin @TARGET_BIN@ @TARGET_ADDRESS@" >> flash.jlink
	echo "r" >> flash.jlink
	echo "g" >> flash.jlink
	echo "exit" >> flash.jlink
	JLinkExe -device @CHIP@ -if @JLINK_INTERFACE@ -speed @JLINK_SPEED@ -CommanderScript flash.jlink
	EXIT_STATUS=$?
else
	echo "JLinkExe is required to reprogram the device"
	exit 3
fi

# Load Screen Session if specified
if (( "$EXIT_STATUS" == "0" )) && [[ "$AUTO_SCREEN_SESSION" != "" ]] && [[ $NOSCREEN -ne 1 ]]; then
	if type screen &>/dev/null; then
		echo "Waiting for serial device..."
		while [ ! -e $AUTO_SCREEN_SESSION ]; do
			sleep 0.1
		done
		screen $AUTO_SCREEN_SESSION
	else
		echo "screen is not installed"
		exit 3
	fi
fi

exit $EXIT_STATUS

